scalar Time

type Account{
    id:String!
    name:String!
    orders:[Order!]
}

type Product{
    id:String!
    name:String!
    descriptation:String!
    price:Float!

}

type Order{
    id:String!
    createdAt:Time!
    totalPrice:Float!
    products:[OrderedProducts!]!
}

type OrderedProducts{
    id:String!
    name:String!
    descriptation:String!
    price:Float!
    quantity:Int!
}

input PaginationInput{
    skip:Int!
    take:Int!
}

input AccountInput{
    name:String!

}

input ProductInput{
    name:String!
    descriptation:String!
}

input OrderedProductInput{
    id:String!
    quantity:Int!
}

input OrderInput{
    accountId:String!
    products:[OrderedProductInput!]!
}

type Mutation {
    createdAccount(account:AccountInput!):Account
    createdProduct(product:ProductInput!):Product
    createdOrder(order:OrderInput!):Order
}

type Query{
    accounts(pagination:PaginationInput,id:String):[Account!]!
    products(pagination:PaginationInput,query:String,id:String):[Product!]!
}